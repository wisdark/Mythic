// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pushC2GRPC.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PushC2Client is the client API for PushC2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushC2Client interface {
	// rpc function(messageFromClient) messageToClient
	StartPushC2Streaming(ctx context.Context, opts ...grpc.CallOption) (PushC2_StartPushC2StreamingClient, error)
	StartPushC2StreamingOneToMany(ctx context.Context, opts ...grpc.CallOption) (PushC2_StartPushC2StreamingOneToManyClient, error)
}

type pushC2Client struct {
	cc grpc.ClientConnInterface
}

func NewPushC2Client(cc grpc.ClientConnInterface) PushC2Client {
	return &pushC2Client{cc}
}

func (c *pushC2Client) StartPushC2Streaming(ctx context.Context, opts ...grpc.CallOption) (PushC2_StartPushC2StreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &PushC2_ServiceDesc.Streams[0], "/pushC2Services.PushC2/StartPushC2Streaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushC2StartPushC2StreamingClient{stream}
	return x, nil
}

type PushC2_StartPushC2StreamingClient interface {
	Send(*PushC2MessageFromAgent) error
	Recv() (*PushC2MessageFromMythic, error)
	grpc.ClientStream
}

type pushC2StartPushC2StreamingClient struct {
	grpc.ClientStream
}

func (x *pushC2StartPushC2StreamingClient) Send(m *PushC2MessageFromAgent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushC2StartPushC2StreamingClient) Recv() (*PushC2MessageFromMythic, error) {
	m := new(PushC2MessageFromMythic)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pushC2Client) StartPushC2StreamingOneToMany(ctx context.Context, opts ...grpc.CallOption) (PushC2_StartPushC2StreamingOneToManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &PushC2_ServiceDesc.Streams[1], "/pushC2Services.PushC2/StartPushC2StreamingOneToMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushC2StartPushC2StreamingOneToManyClient{stream}
	return x, nil
}

type PushC2_StartPushC2StreamingOneToManyClient interface {
	Send(*PushC2MessageFromAgent) error
	Recv() (*PushC2MessageFromMythic, error)
	grpc.ClientStream
}

type pushC2StartPushC2StreamingOneToManyClient struct {
	grpc.ClientStream
}

func (x *pushC2StartPushC2StreamingOneToManyClient) Send(m *PushC2MessageFromAgent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushC2StartPushC2StreamingOneToManyClient) Recv() (*PushC2MessageFromMythic, error) {
	m := new(PushC2MessageFromMythic)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushC2Server is the server API for PushC2 service.
// All implementations must embed UnimplementedPushC2Server
// for forward compatibility
type PushC2Server interface {
	// rpc function(messageFromClient) messageToClient
	StartPushC2Streaming(PushC2_StartPushC2StreamingServer) error
	StartPushC2StreamingOneToMany(PushC2_StartPushC2StreamingOneToManyServer) error
	mustEmbedUnimplementedPushC2Server()
}

// UnimplementedPushC2Server must be embedded to have forward compatible implementations.
type UnimplementedPushC2Server struct {
}

func (UnimplementedPushC2Server) StartPushC2Streaming(PushC2_StartPushC2StreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method StartPushC2Streaming not implemented")
}
func (UnimplementedPushC2Server) StartPushC2StreamingOneToMany(PushC2_StartPushC2StreamingOneToManyServer) error {
	return status.Errorf(codes.Unimplemented, "method StartPushC2StreamingOneToMany not implemented")
}
func (UnimplementedPushC2Server) mustEmbedUnimplementedPushC2Server() {}

// UnsafePushC2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushC2Server will
// result in compilation errors.
type UnsafePushC2Server interface {
	mustEmbedUnimplementedPushC2Server()
}

func RegisterPushC2Server(s grpc.ServiceRegistrar, srv PushC2Server) {
	s.RegisterService(&PushC2_ServiceDesc, srv)
}

func _PushC2_StartPushC2Streaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushC2Server).StartPushC2Streaming(&pushC2StartPushC2StreamingServer{stream})
}

type PushC2_StartPushC2StreamingServer interface {
	Send(*PushC2MessageFromMythic) error
	Recv() (*PushC2MessageFromAgent, error)
	grpc.ServerStream
}

type pushC2StartPushC2StreamingServer struct {
	grpc.ServerStream
}

func (x *pushC2StartPushC2StreamingServer) Send(m *PushC2MessageFromMythic) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushC2StartPushC2StreamingServer) Recv() (*PushC2MessageFromAgent, error) {
	m := new(PushC2MessageFromAgent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PushC2_StartPushC2StreamingOneToMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushC2Server).StartPushC2StreamingOneToMany(&pushC2StartPushC2StreamingOneToManyServer{stream})
}

type PushC2_StartPushC2StreamingOneToManyServer interface {
	Send(*PushC2MessageFromMythic) error
	Recv() (*PushC2MessageFromAgent, error)
	grpc.ServerStream
}

type pushC2StartPushC2StreamingOneToManyServer struct {
	grpc.ServerStream
}

func (x *pushC2StartPushC2StreamingOneToManyServer) Send(m *PushC2MessageFromMythic) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushC2StartPushC2StreamingOneToManyServer) Recv() (*PushC2MessageFromAgent, error) {
	m := new(PushC2MessageFromAgent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushC2_ServiceDesc is the grpc.ServiceDesc for PushC2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushC2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pushC2Services.PushC2",
	HandlerType: (*PushC2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartPushC2Streaming",
			Handler:       _PushC2_StartPushC2Streaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StartPushC2StreamingOneToMany",
			Handler:       _PushC2_StartPushC2StreamingOneToMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pushC2GRPC.proto",
}
