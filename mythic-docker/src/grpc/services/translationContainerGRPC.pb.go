// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: translationContainerGRPC.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrCustomMessageToMythicC2FormatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranslationContainerName string              `protobuf:"bytes,1,opt,name=TranslationContainerName,proto3" json:"TranslationContainerName,omitempty"`
	C2Name                   string              `protobuf:"bytes,2,opt,name=C2Name,proto3" json:"C2Name,omitempty"`
	Message                  []byte              `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	UUID                     string              `protobuf:"bytes,4,opt,name=UUID,proto3" json:"UUID,omitempty"`
	MythicEncrypts           bool                `protobuf:"varint,5,opt,name=MythicEncrypts,proto3" json:"MythicEncrypts,omitempty"`
	CryptoKeys               []*CryptoKeysFormat `protobuf:"bytes,6,rep,name=CryptoKeys,proto3" json:"CryptoKeys,omitempty"`
}

func (x *TrCustomMessageToMythicC2FormatMessage) Reset() {
	*x = TrCustomMessageToMythicC2FormatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translationContainerGRPC_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrCustomMessageToMythicC2FormatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrCustomMessageToMythicC2FormatMessage) ProtoMessage() {}

func (x *TrCustomMessageToMythicC2FormatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_translationContainerGRPC_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrCustomMessageToMythicC2FormatMessage.ProtoReflect.Descriptor instead.
func (*TrCustomMessageToMythicC2FormatMessage) Descriptor() ([]byte, []int) {
	return file_translationContainerGRPC_proto_rawDescGZIP(), []int{0}
}

func (x *TrCustomMessageToMythicC2FormatMessage) GetTranslationContainerName() string {
	if x != nil {
		return x.TranslationContainerName
	}
	return ""
}

func (x *TrCustomMessageToMythicC2FormatMessage) GetC2Name() string {
	if x != nil {
		return x.C2Name
	}
	return ""
}

func (x *TrCustomMessageToMythicC2FormatMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TrCustomMessageToMythicC2FormatMessage) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *TrCustomMessageToMythicC2FormatMessage) GetMythicEncrypts() bool {
	if x != nil {
		return x.MythicEncrypts
	}
	return false
}

func (x *TrCustomMessageToMythicC2FormatMessage) GetCryptoKeys() []*CryptoKeysFormat {
	if x != nil {
		return x.CryptoKeys
	}
	return nil
}

type CryptoKeysFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncKey []byte `protobuf:"bytes,1,opt,name=EncKey,proto3" json:"EncKey,omitempty"`
	DecKey []byte `protobuf:"bytes,2,opt,name=DecKey,proto3" json:"DecKey,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *CryptoKeysFormat) Reset() {
	*x = CryptoKeysFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translationContainerGRPC_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoKeysFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoKeysFormat) ProtoMessage() {}

func (x *CryptoKeysFormat) ProtoReflect() protoreflect.Message {
	mi := &file_translationContainerGRPC_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoKeysFormat.ProtoReflect.Descriptor instead.
func (*CryptoKeysFormat) Descriptor() ([]byte, []int) {
	return file_translationContainerGRPC_proto_rawDescGZIP(), []int{1}
}

func (x *CryptoKeysFormat) GetEncKey() []byte {
	if x != nil {
		return x.EncKey
	}
	return nil
}

func (x *CryptoKeysFormat) GetDecKey() []byte {
	if x != nil {
		return x.DecKey
	}
	return nil
}

func (x *CryptoKeysFormat) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TrCustomMessageToMythicC2FormatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                  bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error                    string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	Message                  []byte `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	TranslationContainerName string `protobuf:"bytes,4,opt,name=TranslationContainerName,proto3" json:"TranslationContainerName,omitempty"`
}

func (x *TrCustomMessageToMythicC2FormatMessageResponse) Reset() {
	*x = TrCustomMessageToMythicC2FormatMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translationContainerGRPC_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrCustomMessageToMythicC2FormatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrCustomMessageToMythicC2FormatMessageResponse) ProtoMessage() {}

func (x *TrCustomMessageToMythicC2FormatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translationContainerGRPC_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrCustomMessageToMythicC2FormatMessageResponse.ProtoReflect.Descriptor instead.
func (*TrCustomMessageToMythicC2FormatMessageResponse) Descriptor() ([]byte, []int) {
	return file_translationContainerGRPC_proto_rawDescGZIP(), []int{2}
}

func (x *TrCustomMessageToMythicC2FormatMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TrCustomMessageToMythicC2FormatMessageResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TrCustomMessageToMythicC2FormatMessageResponse) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TrCustomMessageToMythicC2FormatMessageResponse) GetTranslationContainerName() string {
	if x != nil {
		return x.TranslationContainerName
	}
	return ""
}

type TrMythicC2ToCustomMessageFormatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranslationContainerName string              `protobuf:"bytes,1,opt,name=TranslationContainerName,proto3" json:"TranslationContainerName,omitempty"`
	C2Name                   string              `protobuf:"bytes,2,opt,name=C2Name,proto3" json:"C2Name,omitempty"`
	Message                  []byte              `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	UUID                     string              `protobuf:"bytes,4,opt,name=UUID,proto3" json:"UUID,omitempty"`
	MythicEncrypts           bool                `protobuf:"varint,5,opt,name=MythicEncrypts,proto3" json:"MythicEncrypts,omitempty"`
	CryptoKeys               []*CryptoKeysFormat `protobuf:"bytes,6,rep,name=CryptoKeys,proto3" json:"CryptoKeys,omitempty"`
}

func (x *TrMythicC2ToCustomMessageFormatMessage) Reset() {
	*x = TrMythicC2ToCustomMessageFormatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translationContainerGRPC_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrMythicC2ToCustomMessageFormatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrMythicC2ToCustomMessageFormatMessage) ProtoMessage() {}

func (x *TrMythicC2ToCustomMessageFormatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_translationContainerGRPC_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrMythicC2ToCustomMessageFormatMessage.ProtoReflect.Descriptor instead.
func (*TrMythicC2ToCustomMessageFormatMessage) Descriptor() ([]byte, []int) {
	return file_translationContainerGRPC_proto_rawDescGZIP(), []int{3}
}

func (x *TrMythicC2ToCustomMessageFormatMessage) GetTranslationContainerName() string {
	if x != nil {
		return x.TranslationContainerName
	}
	return ""
}

func (x *TrMythicC2ToCustomMessageFormatMessage) GetC2Name() string {
	if x != nil {
		return x.C2Name
	}
	return ""
}

func (x *TrMythicC2ToCustomMessageFormatMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TrMythicC2ToCustomMessageFormatMessage) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *TrMythicC2ToCustomMessageFormatMessage) GetMythicEncrypts() bool {
	if x != nil {
		return x.MythicEncrypts
	}
	return false
}

func (x *TrMythicC2ToCustomMessageFormatMessage) GetCryptoKeys() []*CryptoKeysFormat {
	if x != nil {
		return x.CryptoKeys
	}
	return nil
}

type TrMythicC2ToCustomMessageFormatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                  bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error                    string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	Message                  []byte `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	TranslationContainerName string `protobuf:"bytes,4,opt,name=TranslationContainerName,proto3" json:"TranslationContainerName,omitempty"`
}

func (x *TrMythicC2ToCustomMessageFormatMessageResponse) Reset() {
	*x = TrMythicC2ToCustomMessageFormatMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translationContainerGRPC_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrMythicC2ToCustomMessageFormatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrMythicC2ToCustomMessageFormatMessageResponse) ProtoMessage() {}

func (x *TrMythicC2ToCustomMessageFormatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translationContainerGRPC_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrMythicC2ToCustomMessageFormatMessageResponse.ProtoReflect.Descriptor instead.
func (*TrMythicC2ToCustomMessageFormatMessageResponse) Descriptor() ([]byte, []int) {
	return file_translationContainerGRPC_proto_rawDescGZIP(), []int{4}
}

func (x *TrMythicC2ToCustomMessageFormatMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TrMythicC2ToCustomMessageFormatMessageResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TrMythicC2ToCustomMessageFormatMessageResponse) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TrMythicC2ToCustomMessageFormatMessageResponse) GetTranslationContainerName() string {
	if x != nil {
		return x.TranslationContainerName
	}
	return ""
}

type TrGenerateEncryptionKeysMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranslationContainerName string `protobuf:"bytes,1,opt,name=TranslationContainerName,proto3" json:"TranslationContainerName,omitempty"`
	C2Name                   string `protobuf:"bytes,2,opt,name=C2Name,proto3" json:"C2Name,omitempty"`
	CryptoParamValue         string `protobuf:"bytes,3,opt,name=CryptoParamValue,proto3" json:"CryptoParamValue,omitempty"`
	CryptoParamName          string `protobuf:"bytes,4,opt,name=CryptoParamName,proto3" json:"CryptoParamName,omitempty"`
}

func (x *TrGenerateEncryptionKeysMessage) Reset() {
	*x = TrGenerateEncryptionKeysMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translationContainerGRPC_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrGenerateEncryptionKeysMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrGenerateEncryptionKeysMessage) ProtoMessage() {}

func (x *TrGenerateEncryptionKeysMessage) ProtoReflect() protoreflect.Message {
	mi := &file_translationContainerGRPC_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrGenerateEncryptionKeysMessage.ProtoReflect.Descriptor instead.
func (*TrGenerateEncryptionKeysMessage) Descriptor() ([]byte, []int) {
	return file_translationContainerGRPC_proto_rawDescGZIP(), []int{5}
}

func (x *TrGenerateEncryptionKeysMessage) GetTranslationContainerName() string {
	if x != nil {
		return x.TranslationContainerName
	}
	return ""
}

func (x *TrGenerateEncryptionKeysMessage) GetC2Name() string {
	if x != nil {
		return x.C2Name
	}
	return ""
}

func (x *TrGenerateEncryptionKeysMessage) GetCryptoParamValue() string {
	if x != nil {
		return x.CryptoParamValue
	}
	return ""
}

func (x *TrGenerateEncryptionKeysMessage) GetCryptoParamName() string {
	if x != nil {
		return x.CryptoParamName
	}
	return ""
}

type TrGenerateEncryptionKeysMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                  bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error                    string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	EncryptionKey            []byte `protobuf:"bytes,3,opt,name=EncryptionKey,proto3" json:"EncryptionKey,omitempty"`
	DecryptionKey            []byte `protobuf:"bytes,4,opt,name=DecryptionKey,proto3" json:"DecryptionKey,omitempty"`
	TranslationContainerName string `protobuf:"bytes,5,opt,name=TranslationContainerName,proto3" json:"TranslationContainerName,omitempty"`
}

func (x *TrGenerateEncryptionKeysMessageResponse) Reset() {
	*x = TrGenerateEncryptionKeysMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translationContainerGRPC_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrGenerateEncryptionKeysMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrGenerateEncryptionKeysMessageResponse) ProtoMessage() {}

func (x *TrGenerateEncryptionKeysMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translationContainerGRPC_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrGenerateEncryptionKeysMessageResponse.ProtoReflect.Descriptor instead.
func (*TrGenerateEncryptionKeysMessageResponse) Descriptor() ([]byte, []int) {
	return file_translationContainerGRPC_proto_rawDescGZIP(), []int{6}
}

func (x *TrGenerateEncryptionKeysMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TrGenerateEncryptionKeysMessageResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TrGenerateEncryptionKeysMessageResponse) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *TrGenerateEncryptionKeysMessageResponse) GetDecryptionKey() []byte {
	if x != nil {
		return x.DecryptionKey
	}
	return nil
}

func (x *TrGenerateEncryptionKeysMessageResponse) GetTranslationContainerName() string {
	if x != nil {
		return x.TranslationContainerName
	}
	return ""
}

var File_translationContainerGRPC_proto protoreflect.FileDescriptor

var file_translationContainerGRPC_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa2,
	0x02, 0x0a, 0x26, 0x54, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x43, 0x32, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4d,
	0x79, 0x74, 0x68, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79,
	0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b,
	0x65, 0x79, 0x73, 0x22, 0x58, 0x0a, 0x10, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79,
	0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x45, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x44, 0x65, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x2e, 0x54, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x43, 0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x26, 0x54, 0x72, 0x4d, 0x79, 0x74,
	0x68, 0x69, 0x63, 0x43, 0x32, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43,
	0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4d, 0x79, 0x74,
	0x68, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x2e,
	0x54, 0x72, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x43, 0x32, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x1f, 0x54, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x27, 0x54, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xbd, 0x04, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0xbd, 0x01, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x43, 0x32, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x1a, 0x44, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x43, 0x32, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0xbd, 0x01, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x43, 0x32, 0x54,
	0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x1a, 0x44, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x43, 0x32, 0x54, 0x6f, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0xa4, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x45, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x3d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x54, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x74, 0x73, 0x2d, 0x61, 0x2d, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x4d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_translationContainerGRPC_proto_rawDescOnce sync.Once
	file_translationContainerGRPC_proto_rawDescData = file_translationContainerGRPC_proto_rawDesc
)

func file_translationContainerGRPC_proto_rawDescGZIP() []byte {
	file_translationContainerGRPC_proto_rawDescOnce.Do(func() {
		file_translationContainerGRPC_proto_rawDescData = protoimpl.X.CompressGZIP(file_translationContainerGRPC_proto_rawDescData)
	})
	return file_translationContainerGRPC_proto_rawDescData
}

var file_translationContainerGRPC_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_translationContainerGRPC_proto_goTypes = []interface{}{
	(*TrCustomMessageToMythicC2FormatMessage)(nil),         // 0: translationContainerServices.TrCustomMessageToMythicC2FormatMessage
	(*CryptoKeysFormat)(nil),                               // 1: translationContainerServices.CryptoKeysFormat
	(*TrCustomMessageToMythicC2FormatMessageResponse)(nil), // 2: translationContainerServices.TrCustomMessageToMythicC2FormatMessageResponse
	(*TrMythicC2ToCustomMessageFormatMessage)(nil),         // 3: translationContainerServices.TrMythicC2ToCustomMessageFormatMessage
	(*TrMythicC2ToCustomMessageFormatMessageResponse)(nil), // 4: translationContainerServices.TrMythicC2ToCustomMessageFormatMessageResponse
	(*TrGenerateEncryptionKeysMessage)(nil),                // 5: translationContainerServices.TrGenerateEncryptionKeysMessage
	(*TrGenerateEncryptionKeysMessageResponse)(nil),        // 6: translationContainerServices.TrGenerateEncryptionKeysMessageResponse
}
var file_translationContainerGRPC_proto_depIdxs = []int32{
	1, // 0: translationContainerServices.TrCustomMessageToMythicC2FormatMessage.CryptoKeys:type_name -> translationContainerServices.CryptoKeysFormat
	1, // 1: translationContainerServices.TrMythicC2ToCustomMessageFormatMessage.CryptoKeys:type_name -> translationContainerServices.CryptoKeysFormat
	2, // 2: translationContainerServices.TranslationContainer.TranslateFromCustomToMythicFormat:input_type -> translationContainerServices.TrCustomMessageToMythicC2FormatMessageResponse
	4, // 3: translationContainerServices.TranslationContainer.TranslateFromMythicToCustomFormat:input_type -> translationContainerServices.TrMythicC2ToCustomMessageFormatMessageResponse
	6, // 4: translationContainerServices.TranslationContainer.GenerateEncryptionKeys:input_type -> translationContainerServices.TrGenerateEncryptionKeysMessageResponse
	0, // 5: translationContainerServices.TranslationContainer.TranslateFromCustomToMythicFormat:output_type -> translationContainerServices.TrCustomMessageToMythicC2FormatMessage
	3, // 6: translationContainerServices.TranslationContainer.TranslateFromMythicToCustomFormat:output_type -> translationContainerServices.TrMythicC2ToCustomMessageFormatMessage
	5, // 7: translationContainerServices.TranslationContainer.GenerateEncryptionKeys:output_type -> translationContainerServices.TrGenerateEncryptionKeysMessage
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_translationContainerGRPC_proto_init() }
func file_translationContainerGRPC_proto_init() {
	if File_translationContainerGRPC_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_translationContainerGRPC_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrCustomMessageToMythicC2FormatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translationContainerGRPC_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoKeysFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translationContainerGRPC_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrCustomMessageToMythicC2FormatMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translationContainerGRPC_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrMythicC2ToCustomMessageFormatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translationContainerGRPC_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrMythicC2ToCustomMessageFormatMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translationContainerGRPC_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrGenerateEncryptionKeysMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translationContainerGRPC_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrGenerateEncryptionKeysMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_translationContainerGRPC_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_translationContainerGRPC_proto_goTypes,
		DependencyIndexes: file_translationContainerGRPC_proto_depIdxs,
		MessageInfos:      file_translationContainerGRPC_proto_msgTypes,
	}.Build()
	File_translationContainerGRPC_proto = out.File
	file_translationContainerGRPC_proto_rawDesc = nil
	file_translationContainerGRPC_proto_goTypes = nil
	file_translationContainerGRPC_proto_depIdxs = nil
}
